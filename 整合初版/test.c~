#include <stdio.h>
#include <stdlib.h> 
#include <string.h> 
#include <ctype.h> 
#include <errno.h> 
#include <malloc.h>
#include <stdarg.h> 
#include <fcntl.h>
#include <sys/types.h> 
#include <sys/socket.h> 
#include <netdb.h> 
#include <unistd.h> 
#include <netinet/in.h> 
#include <netinet/tcp.h>
#include <arpa/inet.h> 
#include <sys/ioctl.h>
#include <pthread.h>
#include <linux/tcp.h>
#include "open62541.h"
#include "modbus/modbus.h"
#define WRONG 2
#define input 512
#define output 768
#define analog 640
#define TRUE 1
#define FALSE 0
#define opc_port 6666

typedef int BOOL;
BOOL bool;
uint16_t tab_inp[1000]={0};
uint16_t tab_oup[1000]={0};
uint16_t tab_ana[1000]={0};
modbus_t *ctx;

UA_Server *server;
int data_r;
typedef struct _DATA_SOURCE{
	char* name;
	unsigned char type;   // 1 stand for DI, 2 stand for DO ,3 stand for analoy
	int state;			  // I\O口状态，高1，低0
	unsigned char H8;
	unsigned char L8;
}DATA_SOURCE;

DATA_SOURCE source[] = {
	{"DI000", 1,0,0,0},
	{"DI001", 1,0,0,0},
	{"DI002", 1,0,0,0},
	{"DI003", 1,0,0,0},
	{"DI004", 1,0,0,0},
	{"DI005", 1,0,0,0},
	{"DI006", 1,0,0,0},
	{"DI007", 1,0,0,0},
	{"DI008", 1,0,0,0},
	{"DI009", 1,0,0,0},
	{"DI010", 1,0,0,0},
	{"DI011", 1,0,0,0},
	{"DI012", 1,0,0,0},
	{"DI013", 1,0,0,0},
	{"DI014", 1,0,0,0},
	{"DI015", 1,0,0,0},
	{"DO000", 2,0,0,0},
	{"DO001", 2,0,0,0},
	{"DO002", 2,0,0,0},
	{"DO003", 2,0,0,0},
	{"DO004", 2,0,0,0},
	{"DO005", 2,0,0,0},
	{"DO006", 2,0,0,0},
	{"DO007", 2,0,0,0},
	{"DO008", 2,0,0,0},
	{"DO009", 2,0,0,0},
	{"DO010", 2,0,0,0},
	{"DO011", 2,0,0,0},
	{"DO012", 2,0,0,0},
	{"DO013", 2,0,0,0},
	{"DO014", 2,0,0,0},
	{"DO015", 2,0,0,0},
	{"AI001", 3,0,0,0},
	{"AI002", 3,0,0,0},
	{"AI003", 3,0,0,0},
	{"AI004", 3,0,0,0},
	{"AO001", 4,0,0,0},
	{"AO002", 4,0,0,0},
	{"AO003", 4,0,0,0},
	{"AO004", 4,0,0,0}
};
void LoadAnalog(int i)
{
	int e, f;
	e = tab_ana[i] >> 8;
	f = tab_ana[i] & 0x0ff;
	source[i+32].H8 = (unsigned char)e;
	source[i+32].L8 = (unsigned char)f;
	return ;

}
void LoadOutputAnalog(int i)
{
	int e, f;
	e = tab_ana[i] >> 8;
	f = tab_ana[i] & 0x0ff;
	source[i+36].H8 = (unsigned char)e;
	source[i+36].L8 = (unsigned char)f;
	return ;

}
void Modbus_read_DI()
{
    bool=TRUE;
    int i;
    while(1)
    {
    modbus_read_registers(ctx,input,16,tab_inp);//function code is 0x04
    modbus_read_registers(ctx,analog,4,tab_ana);//function code is 0x04
   for(i=0;i<=15;i++)
   {
       if(tab_inp[i]==85)
       {
           source[i].state=0;
       }
       else if(tab_inp[i]==170)
       {
           source[i].state=1;
       }
       else
       {
           source[i].state=WRONG;
       }
   }
   for(i=0;i<=3;i++)
   {
     LoadAnalog(i);
   }
   if(bool==FALSE)
   {
       return;
   }
}
void Modbus_read_AO()
	{
		int i;
		 for(i=0;i<=3;i++)
	   {
		 LoadOutputAnalog(i);
	   }
	
	}
void Modbus_read_DO()
	{
	   int i;
	   modbus_read_registers(ctx,output,16,tab_oup);//function code is 0x04
	   for(i=0;i<=15;i++)
	   {
		   if(tab_oup[i]==85)
		   {
			   source[i+16].state=0;
		   }
		   else if(tab_oup[i]==170)
		   {
			   source[i+16].state=1;
		   }
		   else
		   {
			   source[i+16].state=WRONG;
		   }
	   }

void Modbus_write(int i,int a)
{   if(i>15)
    {
        modbus_write_register(ctx,analog+i-16,a);
        return;
    }
    else if(source[i+16].state==1)
    {
        modbus_write_register(ctx,output+i,0xAA);
    }
    else if(source[i+16].state==0)
    {
        modbus_write_register(ctx,output+i,0x55);
    }
}

int Initialization()
{

    ctx = modbus_new_tcp("192.168.198.1", 6666);
    if (ctx == NULL) {
       fprintf(stderr, "Unable to allocate libmodbus context\n");
       return -1;

    }
    modbus_set_slave(ctx,0x0001);
    modbus_connect(ctx);
   if (modbus_connect(ctx) == -1) {
       fprintf(stderr, "Connection failed: %s\n", modbus_strerror(errno));
       modbus_free(ctx);
       return -1;
}
   else {printf("The Modbus Client is online\n");}

    struct timeval t;
      t.tv_sec=0;
      t.tv_usec=1000000;
    modbus_set_response_timeout(ctx,t.tv_sec,t.tv_usec);
    return 0;
}
void printfdata()
{
    int n=0;
    while(n<=32)
   {  if(n==32)
      {printf("%d\n",source[n].state); break;}
      printf("%d ",source[n].state);
      n++;
   }
}


#include <signal.h>
UA_Boolean running = true;
static void stopHandler(int sig) {    
	running = false;
}

int Merge(unsigned char b,unsigned char c)
{
	int a;
	a = (b << 8) | c;
	return a;

}

/*通过名字读数据*/
void* nodeIdFindData(const UA_NodeId nodeId) 
{
	int i;
	for(i=0;i<sizeof(source)/sizeof(DATA_SOURCE);i++) 
	{
		if(strncmp((char*)nodeId.identifier.string.data, source[i].name, strlen(source[i].name)) == 0) 
		{
			if(source[i].type == 1||source[i].type ==2) {
				return &source[i].state;
			}
			else if(source[i].type == 3||source[i].type ==4) 
				{	
					data_r=Merge(source[i].H8, source[i].L8);
					return &data_r;
				}			
		}
	}
	printf("not find:%s!\n",nodeId.identifier.string.data);
	return NULL;
}

/*通过名字写数据*/
void* nodeIdwriteData(const UA_NodeId nodeId, const UA_Variant *data) 
{
	int i;
	for(i=0;i<sizeof(source)/sizeof(DATA_SOURCE);i++) 
	{
		if(strncmp(source[i].name, (char*)nodeId.identifier.string.data, strlen(source[i].name)) == 0) 
		{
			if(source[i].type == 1||source[i].type ==2) {
				source[i].state=*(int*)data->data;
				return &source[i].state;
			}
			else if(source[i].type == 3||source[i].type ==4) {	
				 	source[i].H8 =*(int*)data->data >> 8;
					source[i].L8 =*(int*)data->data & 0x0ff;
					printf("write 16 hex %x %x\n",source[i].H8,source[i].L8);
				 return &source[i].H8;
			}			
		}
	}
	printf("not find:%s!\n",nodeId.identifier.string.data);
	return NULL;
}

/*读数据*/
static UA_StatusCode
readDataSource(void *handle, const UA_NodeId nodeId, UA_Boolean sourceTimeStamp,
             const UA_NumericRange *range, UA_DataValue *dataValue) {
	if(range) {
        dataValue->hasStatus = true;
        dataValue->status = UA_STATUSCODE_BADINDEXRANGEINVALID;
        return UA_STATUSCODE_GOOD;
    }
	UA_Int16 temp;
	if(nodeIdFindData(nodeId) != NULL)
		temp = *(UA_Int16*)nodeIdFindData(nodeId);
	else 
		temp = 0;
	dataValue->sourceTimestamp = UA_DateTime_now();
	dataValue->hasValue = true;
	dataValue->hasSourceTimestamp = true;
    UA_Variant_setScalarCopy(&dataValue->value, &temp, &UA_TYPES[UA_TYPES_INT16]);
	printf("Node read %s\n", nodeId.identifier.string.data);
	printf("read Value %d\n", temp);
    return UA_STATUSCODE_GOOD;
}

/*写数据*/
static UA_StatusCode
writeDataSource(void *handle, const UA_NodeId nodeId, const UA_Variant *data, 
			const UA_NumericRange *range) {
				UA_Int16 temp;
	if(UA_Variant_isScalar(data) && data->type == &UA_TYPES[UA_TYPES_INT16] && data->data)
	{
		if(nodeIdwriteData(nodeId, data)!=NULL)
			temp = *(UA_Int16*)data->data;
	}
//	*ANALOY->state=*handle;
	printf("Node written %s\n", nodeId.identifier.string.data);
	printf("written value %d\n",  temp);
    return UA_STATUSCODE_GOOD;		
}
			 
void add_dataSource_to_opcServer()
{
	int i;
	for(i=0; i<sizeof(source)/sizeof(DATA_SOURCE);i++) {
		if(source[i].type == 1) {
					UA_DataSource dateDataSource = (UA_DataSource) {.handle = NULL, .read = readDataSource, 
		.write = NULL};
		
		UA_VariableAttributes *attr = UA_VariableAttributes_new();
    	UA_VariableAttributes_init(attr);
//			UA_Int32 intState = (UA_Int32)source[i].state;
//		UA_Variant_setScalar(&attr->value, &intState, &UA_TYPES[UA_TYPES_INT32]);
		attr->description = UA_LOCALIZEDTEXT("en_US",source[i].name);
	    attr->displayName = UA_LOCALIZEDTEXT("en_US",source[i].name);
		attr->accessLevel = UA_ACCESSLEVELMASK_READ | UA_ACCESSLEVELMASK_WRITE;
	    UA_NodeId myIntegerNodeId = UA_NODEID_STRING(1, source[i].name);
	    UA_QualifiedName myIntegerName = UA_QUALIFIEDNAME(1, source[i].name);
	    UA_NodeId parentNodeId = UA_NODEID_NUMERIC(1, 1000);
	    UA_NodeId parentReferenceNodeId = UA_NODEID_NUMERIC(0, UA_NS0ID_HASPROPERTY);
		UA_Server_addDataSourceVariableNode(server, myIntegerNodeId,parentNodeId,
	                              					parentReferenceNodeId, myIntegerName,
                                                UA_NODEID_NULL, *attr, dateDataSource, NULL); 
		}
		if(source[i].type == 2) {
					UA_DataSource dateDataSource = (UA_DataSource) {.handle = NULL, .read = readDataSource, 
		.write = writeDataSource};
		
		UA_VariableAttributes *attr = UA_VariableAttributes_new();
    	UA_VariableAttributes_init(attr);
//			UA_Int32 intState = (UA_Int32)source[i].state;
//		UA_Variant_setScalar(&attr->value, &intState, &UA_TYPES[UA_TYPES_INT32]);
		attr->description = UA_LOCALIZEDTEXT("en_US",source[i].name);
	    attr->displayName = UA_LOCALIZEDTEXT("en_US",source[i].name);
		attr->accessLevel = UA_ACCESSLEVELMASK_READ | UA_ACCESSLEVELMASK_WRITE;
	    UA_NodeId myIntegerNodeId = UA_NODEID_STRING(1, source[i].name);
	    UA_QualifiedName myIntegerName = UA_QUALIFIEDNAME(1, source[i].name);
	    UA_NodeId parentNodeId = UA_NODEID_NUMERIC(1, 2000);
	    UA_NodeId parentReferenceNodeId = UA_NODEID_NUMERIC(0, UA_NS0ID_HASPROPERTY);
		UA_Server_addDataSourceVariableNode(server, myIntegerNodeId,parentNodeId,
	                              					parentReferenceNodeId, myIntegerName,
                                                UA_NODEID_NULL, *attr, dateDataSource, NULL); 
		}
		if(source[i].type == 3) {
					UA_DataSource dateDataSource = (UA_DataSource) {.handle = NULL, .read = readDataSource, 
		.write = writeDataSource};
		
		UA_VariableAttributes *attr = UA_VariableAttributes_new();
    	UA_VariableAttributes_init(attr);
//			UA_Int32 intData = (UA_Int32)source[i].data;
//		UA_Variant_setScalar(&attr->value, &intData, &UA_TYPES[UA_TYPES_INT32]);
		attr->description = UA_LOCALIZEDTEXT("en_US",source[i].name);
	    attr->displayName = UA_LOCALIZEDTEXT("en_US",source[i].name);
		attr->accessLevel = UA_ACCESSLEVELMASK_READ | UA_ACCESSLEVELMASK_WRITE;
	    UA_NodeId myIntegerNodeId = UA_NODEID_STRING(1, source[i].name);
	    UA_QualifiedName myIntegerName = UA_QUALIFIEDNAME(1, source[i].name);
	    UA_NodeId parentNodeId = UA_NODEID_NUMERIC(1, 3000);
	    UA_NodeId parentReferenceNodeId = UA_NODEID_NUMERIC(0, UA_NS0ID_HASPROPERTY);
		UA_Server_addDataSourceVariableNode(server, myIntegerNodeId,parentNodeId,
	                              					parentReferenceNodeId, myIntegerName,
                                                UA_NODEID_NULL, *attr, dateDataSource, NULL); 										
		}
		if(source[i].type == 4) {
					UA_DataSource dateDataSource = (UA_DataSource) {.handle = NULL, .read = readDataSource, 
		.write = writeDataSource};
		
		UA_VariableAttributes *attr = UA_VariableAttributes_new();
    	UA_VariableAttributes_init(attr);
//			UA_Int32 intData = (UA_Int32)source[i].data;
//		UA_Variant_setScalar(&attr->value, &intData, &UA_TYPES[UA_TYPES_INT32]);
		attr->description = UA_LOCALIZEDTEXT("en_US",source[i].name);
	    attr->displayName = UA_LOCALIZEDTEXT("en_US",source[i].name);
		attr->accessLevel = UA_ACCESSLEVELMASK_READ | UA_ACCESSLEVELMASK_WRITE;
	    UA_NodeId myIntegerNodeId = UA_NODEID_STRING(1, source[i].name);
	    UA_QualifiedName myIntegerName = UA_QUALIFIEDNAME(1, source[i].name);
	    UA_NodeId parentNodeId = UA_NODEID_NUMERIC(1, 4000);
	    UA_NodeId parentReferenceNodeId = UA_NODEID_NUMERIC(0, UA_NS0ID_HASPROPERTY);
		UA_Server_addDataSourceVariableNode(server, myIntegerNodeId,parentNodeId,
	                              					parentReferenceNodeId, myIntegerName,
                                                UA_NODEID_NULL, *attr, dateDataSource, NULL); 										
		}
	}
}

void handle_opcua_server(void * arg){
		//signal(SIGINT,  stopHandler);
    //signal(SIGTERM, stopHandler);

	UA_ServerConfig config = UA_ServerConfig_standard;
    UA_ServerNetworkLayer nl = UA_ServerNetworkLayerTCP(UA_ConnectionConfig_standard, opc_port);
	config.networkLayers = &nl;
    config.networkLayersSize = 1;
	server = UA_Server_new(config);


	/* add a variable node Digital to the address space */
    UA_VariableAttributes attr;
    UA_VariableAttributes_init(&attr);
    attr.description = UA_LOCALIZEDTEXT("en_US","DI");
    attr.displayName = UA_LOCALIZEDTEXT("en_US","DI");

	
	/* Add the three variable node to the information model */
    UA_NodeId myIntegerNodeId = UA_NODEID_NUMERIC(1, 1000);
    UA_QualifiedName myIntegerName = UA_QUALIFIEDNAME(1, "DI");
    UA_NodeId parentNodeId = UA_NODEID_NUMERIC(0, UA_NS0ID_OBJECTSFOLDER);
    UA_NodeId parentReferenceNodeId = UA_NODEID_NUMERIC(0, UA_NS0ID_ORGANIZES);
    UA_Server_addVariableNode(server, myIntegerNodeId, parentNodeId,
                              parentReferenceNodeId, myIntegerName,
                              UA_NODEID_NULL, attr, NULL, NULL);
		
    UA_VariableAttributes_init(&attr);
    attr.description = UA_LOCALIZEDTEXT("en_US","DO");
    attr.displayName = UA_LOCALIZEDTEXT("en_US","DO");
    UA_Server_addVariableNode(server,  UA_NODEID_NUMERIC(1, 2000), UA_NODEID_NUMERIC(0, UA_NS0ID_OBJECTSFOLDER),
                              UA_NODEID_NUMERIC(0, UA_NS0ID_ORGANIZES), UA_QUALIFIEDNAME(1, "DO"),
                              UA_NODEID_NULL, attr, NULL, NULL);	
							  						  	
    UA_VariableAttributes_init(&attr);
    attr.description = UA_LOCALIZEDTEXT("en_US","AI");
    attr.displayName = UA_LOCALIZEDTEXT("en_US","AI");
    UA_Server_addVariableNode(server,  UA_NODEID_NUMERIC(1, 3000), UA_NODEID_NUMERIC(0, UA_NS0ID_OBJECTSFOLDER),
                              UA_NODEID_NUMERIC(0, UA_NS0ID_ORGANIZES), UA_QUALIFIEDNAME(1, "AI"),
                              UA_NODEID_NULL, attr, NULL, NULL);
							  
	 UA_VariableAttributes_init(&attr);
    attr.description = UA_LOCALIZEDTEXT("en_US","AO");
    attr.displayName = UA_LOCALIZEDTEXT("en_US","AO");
    UA_Server_addVariableNode(server,  UA_NODEID_NUMERIC(1, 4000), UA_NODEID_NUMERIC(0, UA_NS0ID_OBJECTSFOLDER),
                              UA_NODEID_NUMERIC(0, UA_NS0ID_ORGANIZES), UA_QUALIFIEDNAME(1, "AO"),
                              UA_NODEID_NULL, attr, NULL, NULL);

	
	add_dataSource_to_opcServer();


    UA_Server_run(server, &running);
	UA_Server_delete(server);
    nl.deleteMembers(&nl);  
}

int main()
{

		int ret;
		pthread_t read;
		Initialization();
		Modbus_read_DO();
		ret=pthread_create(&read,NULL,(void*)Modbus_read_DI,NULL);
		if(ret!=0){
		printf("Create pthread error!\n");
		exit(1);
	}
		int num[100],i;
		Modbus_read_AO();
		for(i=0;i<=19;i++)
		{
			if(i<=15)
			{
			num[i]=source[i+16].state;
			}
			if(i>15)
			{	int j;
				j=Merge(j,source[i+20].H8,source[i+20].L8);
				num[i]=j;
			}
		}
		pthread_t opcua_server_id;
		pthread_create(&opcua_server_id,NULL,(void *)handle_opcua_server,NULL);
	   while(1)
	   {
		   for(i=0;i<=19;i++)
		   {
			   if(i>15)
				{
					int a;
					a=Merge(a,source[i+20].H8,source[i+20].L8);
					if (a!=num[i])
					{
						bool=FALSE;
						Modbus_write(i,a);
						num[i]=a;
						pthread_create(&read,NULL,(void*)Modbus_read_DI,NULL);
					}
				}
			   else if(i<=15){
	
			if(source[i+16].state!=num[i])
			   {
					bool=FALSE;
					Modbus_write(i,0);
					num[i]=source[i+16].state;
					pthread_create(&read,NULL,(void*)Modbus_read_DI,NULL);
			   }
			   }
		   }
		sleep(1);
	
	   }
	}
	return 0;
}
